# -*- coding: utf-8 -*-
#loggers、handlers、formatters这些项，通过keys来指定多个值之间用逗号分隔；另外loggers中的keys一定要包含root这个值
[loggers]
keys=root,simple

[handlers]
keys=fileHandler,consoleHandler,TimedRotatingFileHandler

[formatters]
keys=simpleFormatter

#----------------------------------------------
#对上面定义的loggers日志器进行进一步定义,格式为,logger_{logName},logName为[loggers]中定义的名称
#level和handlers必须指定
[logger_root]
level=DEBUG     
handlers=fileHandler

[logger_simple]
level=DEBUG
handlers=consoleHandler
#对于非root logger, qualname必须提供,它表示在logger层级中的名字,在应用代码中通过这个名字得到logger
qualname=simple 
#propagate是可选项,其默认是为1,表示消息将会传递给高层次logger的handler,通常我们需要指定其值为0
propagate=0

#--------------------------------------------
#对上面的handler进行定义。定义handler中必须指定class和args这两个option, level和formatter为可选,
#class表示用于创建handler的类名,args表示传递给class所指定的handler类初始化方法参数		
[handler_consoleHandler]
class=StreamHandler
args=(sys.stdout,)  #必须是一个元组
level=DEBUG
formatter=simpleFormatter

[handler_fileHandler]
class=FileHandler
args=('logging.log', 'a')
level=ERROR
formatter=simpleFormatter

#配置文件中的class指定类名时，该类名可以是相对于logging模块的相对值，如：FileHandler、handlers.TimeRotatingFileHandler；
#也可以是一个绝对路径值，通过普通的import机制来解析，如自定义的handler类mypackage.mymodule.MyHandler，
#但是mypackage需要在Python可用的导入路径中--sys.path
[handler_TimedRotatingFileHandler]
class=handlers.TimedRotatingFileHandler
args=('info.log',)
level=INFO
formatter=simpleFormatter

#--------------------------------------------
#对上面的formatters进行定义
[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S